// ElectronicNoobs Code didn't work until adding the following libraries 
// github.com/maniacbug/RF24
// RF24 from Arduino IDE
// RF24 Network from Arduino IDE 
// Used Getting Started script on both NRF24 Modules to test their communication.
// Realized out of the box several of the NRF24L01 +PA Modules were deffective. 
// NOTE: After installing libraries Use File/Examples/NRF24/Getting Started script 
// on each module to test TX and RX and make sure radio modules work and communicate 
// When starting out it helps to use breakout boards for these modules
// Also make certain these pins are set to these positions on breakout boards 
// CE CSN SCK MO  MI
// D9 D10 D13 D11 D12 
// Otherwise Getting Started script will give Radio Not Working message. 

// Derived code is below

/* Receiver code for the Arduino Radio control with PWM output
 * Install the NRF24 library to your IDE
 * Upload this code to the Arduino UNO, NANO, Pro mini (5V,16MHz)
 * Connect a NRF24 module to it:
 
    Module // Arduino UNO,NANO
    
    GND    ->   GND
    Vcc    ->   3.3V
    CE     ->   D9
    CSN    ->   D10
    CLK    ->   D13
    MOSI   ->   D11
    MISO   ->   D12

This code receive 7 channels and create a PWM output for each one on D2, D3, D4, D5, D6, D7and D8
Please, like share and subscribe : https://www.youtube.com/c/ELECTRONOOBS
*/
// IMPORTED LIBRARIES 
#include <SPI.h>
#include <nRF24L01.h> // Module specific library 
#include <RF24.h>
#include <Servo.h>  //To create PWM signals we need this library

// ElectronicNoobs Code didn't work until adding the following libraries 
// github.com/maniacbug/RF24
// RF24 from Arduino IDE
// RF24 Network from Arduino IDE 
// Used Getting Started script on both NRF24 Modules to test their communication.
// Realized out of the box several of the NRF24L01 +PA Modules were deffective. 
// NOTE: After installing libraries Use File/Examples/NRF24/Getting Started script 
// on each module to test TX and RX and make sure radio modules work and communicate 
// When starting out it helps to use breakout boards for these modules
// Also make certain these pins are set to these positions on breakout boards 
// CE CSN SCK MO  MI
// D9 D10 D13 D11 D12 
// Otherwise Getting Started script will give Radio Not Working message. 

// This is the pipe through which the NRF24 Modules speak - key specific to two modules.
const uint64_t pipeIn = 0xE8E8F0F0E1LL;     // = Any name must be specific to both TX and RX  
RF24 radio(9, 10);  //CSN and CE pins // Some use (7, 8) must be same for TX and RX

// The sizeof this struct should not exceed 32 bytes
// RX channels in - for clarification I have added what goes where 
// but this could be any of your choosing as long as the safe 
// values are set for your hardware pieces 
// Arduino nano only has 7 digital pins D2-D8 available 
  
struct Received_data {
  byte ch1;
  byte ch2;
  byte ch3;
  byte ch4;
  byte ch5;
  byte ch6;        
  byte ch7;
};

Received_data received_data;

Servo channel_1;  // D2 Throttle
Servo channel_2; // D3 Joystic or Potentiometer X or Y 
Servo channel_3; // D4 // Joystic or Potentiometer X or Y 
Servo channel_4; // D5 // Joystic or Potentiometer X or Y 
Servo channel_5; // D6 Digital read 2 // SWitch
Servo channel_6; // D7 Digital Read 3 // Switch 
Servo channel_7; // D8 Button? 
// Adding of channels  
int ch1_value = 0;
int ch2_value = 0;
int ch3_value = 0;
int ch4_value = 0;
int ch5_value = 0;
int ch6_value = 0;
int ch7_value = 0;

void reset_the_Data() 
{
  // 'safe' values to use when NO radio input is detected
  received_data.ch1 = 0;      // Throttle (channel 1) to 0 Up/Dwn on TX set below middle 
  received_data.ch2 = 127;  // Stick Up/Dwn or Potentiometer - Mid value set 
  received_data.ch3 = 127; // Stick L/R or Potentiometer - Mid value value set 
  received_data.ch4 = 127; // Stick L/R Potentiometer - Mid value set 
  received_data.ch5 = 0; // Switch
  received_data.ch6 = 0; // Switch 
  received_data.ch7 = 0; // Joystic or Potentiometer - Mid value set 
}



/**************************************************/

void setup()
{
  //Attach the servo signal on pins from D2 to D8
  // 
  channel_1.attach(2); // D2 Throttle or ESC   
  channel_2.attach(3); // D3 X or Y on right stick Pitch? 
  channel_3.attach(4); // D4 X or Y on righ stick Roll? 
  channel_4.attach(5); // D5 X or Y on left stick Yaw?  
  channel_5.attach(6); // D6 Switch 
  channel_6.attach(7); // D7 Switch 
  channel_7.attach(8); // D8 Other 
  
  //We reset the received values
  reset_the_Data();

  //Once again, begin and radio configuration
  radio.begin();
  radio.setAutoAck(false);
  radio.setDataRate(RF24_250KBPS);  
  radio.openReadingPipe(1,pipeIn);
  
  //We start the radio comunication
  radio.startListening();

}xxc

/**************************************************/

unsigned long lastRecvTime = 0;

//We create the function that will read the data each certain time
void receive_the_data()
{
  while ( radio.available() ) {
  radio.read(&received_data, sizeof(Received_data));
  lastRecvTime = millis(); //Here we receive the data
}
}

/**************************************************/

void loop()
{
  //Receive the radio data
  receive_the_data();

// Short time here for resetting data if signal is lost for 1 sec. //
////////////////////////////////////////////////////////////////////
  unsigned long now = millis();
  if ( now - lastRecvTime > 1000 ) {
    // signal lost? Means if Last packet received is greater than 1000 milliseconds RESET 
    reset_the_Data();
    //Change the initial values depending on your aplications.
    // Put 0 for throttle in case of drones so it won't fly away. 
   // BohemianBAbyDev says "Also 0 for throttle because if you lose signal your RC car will take off".
  } 

  /* Hardware issue: Channel Values Sweep settings 
   C1 Value originally 0,255,1000,2000 but standard arduino stick 
   bounces to middle by itself and full throw can be used. 
   Vintage Futaba Magnum Pots only seem to use center and 25% on each side. 
   ch2_value = map(received_data.ch1,0,255,1000,2000);
   BohemianBabyDev altered these because the 5k pot on the vintage controller 
   used limited sweep from mid to only about 25% on each side. This solved the issue of the 
   servo not moving far enough I am uncertain if the code is "correct" otherwise. 
  */
  ch1_value = map(received_data.ch1,0,255,000,3500); // altered value due to limited Futaba 5k potentiometer
  ch2_value = map(received_data.ch2,0,255,000,3500); // altered value due to limited Futaba 5k potentiometer
  
  ch3_value = map(received_data.ch3,0,255,1000,2000);
  ch4_value = map(received_data.ch4,0,255,1000,2000);
  ch5_value = map(received_data.ch5,0,1,1000,2000);
  ch6_value = map(received_data.ch6,0,1,1000,2000); // on or off
  ch7_value = map(received_data.ch7,0,255,1000,2000);

  //Create the PWM signals
  channel_1.writeMicroseconds(ch1_value);  
  channel_2.writeMicroseconds(ch2_value);  
  channel_3.writeMicroseconds(ch3_value);  
  channel_4.writeMicroseconds(ch4_value);  
  channel_5.writeMicroseconds(ch5_value);  
  channel_6.writeMicroseconds(ch6_value);  
  channel_7.writeMicroseconds(ch7_value);  
  
  
}//Loop end
